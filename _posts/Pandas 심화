# 조건으로 검샘하기

* import array와 마찬가지로 masking 연산이 가능하다

```python
import numpy as np
import pandas as pd
df = pd.DataFrame(np.random.rand(5, 2), columns = ['A','B'])
#   A	B
# 0	0.082643	0.060151
# 1	0.458029	0.336073
# 2	0.542312	0.850756
# 3	0.308405	0.878746
# 4	0.698897	0.393805

df['A'] < 0.5
# 0     True
# 1     True
# 2    False
# 3     True
# 4    False
# Name: A, dtype: bool
```

```python
import numpy as np
import pandas as pd
df = pd.DataFrame(np.random.rand(5, 2), columns = ['A','B'])
df[(df["A"] < 0.5) & (df["B"] > 0.3)]
df.query("A < 0.5 and B > 0.3")
#   A	B
# 0	0.146824	0.988963
# 3	0.167327	0.744833
```

* 문자열이라면 다른 방식으로도 조건 검색이 가능하다

```python
df = pd.DataFrame([["Dog", "Happy"],
                   ["Cat", "Sam"],
                   ["Cat", "Toby"],
                   ["Pig", "Mini"],
                   ["Cat", "Rocky"]], columns = ['Animal','Name'])
df["Animal"].str.contains("Cat")
df.Animal.str.match("Cat")
# 0    False
# 1     True
# 2     True
# 3    False
# 4     True
# Name: Animal, dtype: bool
```

# 함수로 데이터 처리하기

* apply를 통해서 함수로 데이터를 다룰 수 있다

```python
df = pd.DataFrame(np.arange(5), columns=["Num"])
def square(x):
  return x*2
df["Num"].apply(square)
# 0    0
# 1    2
# 2    4
# 3    6
# 4    8
# Name: Num, dtype: int64

df["square"] = df.Num.apply(lambda x: x**2)
#   Num  square
# 0    0       0
# 1    1       1
# 2    2       4
# 3    3       9
# 4    4      16
```

* 예제

```python
df = pd.DataFrame(columns=["phone"])
df.loc[0] = "010-1234-1235"
df.loc[1] = "공일공-일이삼사-1235"
df.loc[2] = "010.1234.일이삼오"
df.loc[3] = "공1공-1234.1이3오"
df["preprecess_phone"] = ''
#   phone	preprecess_phone
# 0	010-1234-1235	
# 1	공일공-일이삼사-1235	
# 2	010.1234.일이삼오	
# 3	공1공-1234.1이3오	

def get_preprocess_phone(phone):
  mapping_dict = {
    "공" : "0",
    "일" : "1",
    "이" : "2",
    "삼" : "3",
    "사" : "4",
    "오" : "5",
    "-" : "",
    "." : ""
  }
  for key, value in mapping_dict.items():
    phone = phone.replace(key, value)
  return phone
df["preprecess_phone"] = df["phone"].apply(get_preprocessed_phonenumber)
#   phone	preprecess_phone
# 0	010-1234-1235	01012341235
# 1	공일공-일이삼사-1235	01012341235
# 2	010.1234.일이삼오	01012341235
# 3	공1공-1234.1이3오	01012341235
```

* replace: apply 기능에서 데이터 값만 대체 하고 싶을때

```python
df = pd.DataFrame(["Male","Male","Female","Femaile","Male"],columns=["Sex"])
#   Sex
# 0    Male
# 1    Male
# 2  Female
# 3  Female
# 4    Male

df.Sex.replace({"Male": 0, "Female": 1})
df.Sex.replace({"Male": 0, "Female": 1}, inplace = True)
# 0    0
# 1    0
# 2    1
# 3    1
# 4    0
# Name: Sex, dtype: int64
```

# 그룹으로 묶기

* 간단한 집계를 넘어서서 조건부로 집계하고 싶은 경우

```python
df = pd.DataFrame({'key':['A', 'B', 'C', 'A', 'B', 'C'],
  'data' : [1, 2, 3, 1, 2, 3], 'data2': np.random.randint(0, 6, 6)})
df.groupby('key')
# <pandas.core.groupby.generic.DataFrameGroupBy object at 0x000001CA2C72CCC8>

df.groupby('key').sum()
#   data	data2
# key		
# A	2	5
# B	4	2
# C	6	5

df.groupby(['key','data']).sum()
#     data2
# key	data	
# A	1	5
# B	2	2
# C	3	5
```
