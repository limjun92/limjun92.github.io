객체의 life cycle
파이썬 실행했을 때 메모리와 cpu에서 일어나는 일을 질문 받았지만, 우선 class를 기준으로 설명해놓은 블로그를 찾아서 해당 내용으로 정리한다. (참고 링크)

The life cycle of an object consists of three basic steps:

creation: 클래스를 정의하고 인스턴스를 생성한다. 이 때 객체에 메모리가 할당되고, 객체가 조작될 준비를 마치게 된다. __init__
handling
destruction: 객체의 reference count가 0이 될 때, 더이상 참조하는 값이 없을 때 객체가 삭제된다. 객체가 필요 없어졌을 때 제거하는 것을 garbage collection이라고 한다. __del__
thread와 multiprocess의 차이
python은 thread보다 process를 통한 병렬처리를 더 선호한다고 한다. GIL 때문에 multiprocess로 작업하는 것이 더 빠르다.

multiprocessing을 thread 대신 사용해 multi core CPU의 장점을 사용할 수 있고, global interpreter lock 병목 현상을 피할 수 있다.

(참고 링크)

parameter와 argument의 차이
parameter: 함수를 정의할 때 사용
argument: 함수를 호출할 때 사용
Call by value, call by reference
Call by value(값에 의한 호출)는 인자로 받은 값을 복사하여 처리를 한다. Call by reference(참조에 의한 호출)는 인자로 받은 값의 주소를 참조하여 직접 값에 영향을 준다. 간단히 말해 값을 복사를 하여 처리를 하느냐, 아니면 직접 참조를 하느냐 차이인 것이다. (참고 링크)

Call by value(값에 의한 호출)
장점 : 복사하여 처리하기 때문에 안전하다. 원래의 값이 보존이 된다.
단점 : 복사를 하기 때문에 메모리가 사용량이 늘어난다.

Call by reference(참조에 의한 호출)
장점 : 복사하지 않고 직접 참조를 하기에 빠르다.
단점 : 직접 참조를 하기에 원래 값이 영향을 받는다.(리스크)

Python 은 명시적인 Call by Reference 혹은 Call by Value 라는 개념이 존재하지 않는다.

Python의 function에 argument 를 전달할 때, 이는 Manual 에 따르면 call by assignment 라는 방식으로 전달된다. 이는 Parameter로 전달받는 객체에 따라 객체의 참조방식이 결정된다는 의미로, 공식 문서에 따르면 Mutable Object 는 Call by reference의 형태로 참조형으로 변수를 다루며 Immutable Object는 Call by value 의 형태로 변수를 핸들링한다.

Mutable Object : list, dict, set 등의 객체

Immutable Object : str, int, tuple 등의 객체
