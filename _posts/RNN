RNN 이란 Recurrent Neural Network(순환신경망)

타임 스텝마다, 이전 시점의 은닉 상태를 받고 계산한뒤 다음 시점으로


문장에서 현재 단어 기억하고 다음 단어 분석에 사용할 수 있도록 넘겨 주는 것
(이전까지의 단어에 대한 기억을 저장해서 다음 단어에 대해 사용)

가중치와 같이 넘겨준다

ht = tang(WxXt + WhH(t-1) + b)
y2 = f(WyHt+b)

f는 시그모이드가 될수도 있고 소프트맥스가 될수 있다

기존에는 가중치만 업데이트 해 나갔다면, 그 과정에서 h라는 값을 추가 한 것


# LSTM

LSTM은 4개의 게이트로 이루어진다(셀, 입력, 출력, 삭제)

* 전체 순서도
1 데이터 불러와서 스플릿
2 스탑워드 제거, 토큰화을의 전처리
3 유의미한 단어 갯수만큼 점수 인덱스 부여
4 패딩을 통해 문장 길이 통일 
5 레이어를 쌓아서 모델 훈련

* 데이터 불러와서 스플릿
1 데어터 불러오기
2 정규표현식 사용해서 1차 전처리(단어 -> 숫자 등)
3 공백인 행/열은 제거
4 테스트/트레인 셋 나누기(나중에 나눠도 됨)

* 데이터 전처리 후 토큰화
1 스탑워드 리스트에 해당하지 않는 것만 리스트화
2 리스트에 추가할 때 스플릿/ 토크나이저 사용
3 일정 빈도 수 이상의 단어만 인덱스 부여

* 토큰화 ~ 패딩
1 텍스트의 최대 길이, 평균 길이 찾기
2 벡터의 최대 길이는 문장의 최대/평균 길이로
3 최대 길이에 맞추어 패딩

* 모델 구성
1 입력 레이어는 Embedding으로 input은 단어 갯수만큼(무조건 정수화된 단어)
  원한다면 여기서 weight로 word2vec, glove 사용가능
2 중간 레이어는 LSTM, RNN 등을 사용(dense vector가 통과)
3 출력 레이어는 sigmoid, softmax 등 분류 문제에 따라
* sigmoid 는 이진분류 그 이상이면 softmax

* 컴파일/핏
1 손실함수도 문제에 따라
2 데이터를 이용해 모델 훈련
3 필요하다면 earlystopping, checkpoint 등 사용
